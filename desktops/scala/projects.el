;; -*- mode: emacs-lisp; -*-

(add-project "scratchpad" "/media/XENO/Dropbox/Scratchpad/Scala/src" "scratchpad" "scratchpad")
(add-project "desktop" "/media/XENO/Dropbox/Software/Emacs/desktops/scala" nil)
(add-project ".emacs" "/media/XENO/Dropbox/Software/Emacs" nil)

(setq tool-buffers-autofollow nil)
(setq tool-buffers-display-in-bottom-window t)
(setq tool-buffers-display-in-right-window nil)
                                                                                        
(defun my-repl-project (name-or-path)
  (let ((project-name "scratchpad"))
  (when project-name
    (if (buffer-file-name) (save-buffer))
    ;;(sbt-invoke "*repl*" project-name ("compile" "console")))))
    (sbt-invoke "*repl*" project-name "compile" (lambda ()
      (insert "\n")
      (compilation-shell-minor-mode -1)
      
      (defvar sbt-repl-minor-mode-map (make-keymap) "sbt-repl-minor-mode keymap.")
      (define-key sbt-repl-minor-mode-map (kbd "<return>") (lambda ()
        (interactive)
        (if (and (get-buffer-process (current-buffer)) (eq (point) (point-max)))
          (comint-send-input)
          (newline))))
      (define-key sbt-repl-minor-mode-map (kbd "C-S-r") (lambda () (interactive) (my-repl-project (sbt-invoke-project))))
      (define-key sbt-repl-minor-mode-map (kbd "C-S-b") (lambda () (interactive) (my-compile-project (sbt-invoke-project))))
      (define-prefix-command 'sbt-repl-minor-mode-compile-map)
      (define-key sbt-repl-minor-mode-map (kbd "M-b") 'sbt-repl-minor-mode-compile-map)
      (define-key sbt-repl-minor-mode-compile-map (kbd "r") (lambda () (interactive) (my-rebuild-project (sbt-invoke-project))))
      (define-key sbt-repl-minor-mode-compile-map (kbd "M-r") (lambda () (interactive) (my-rebuild-project (sbt-invoke-project))))
      (define-key sbt-repl-minor-mode-map (kbd "<C-S-return>") (lambda () (interactive) (my-run-project (sbt-invoke-project))))
      (define-key sbt-repl-minor-mode-map (kbd "<s-S-return>") (lambda () (interactive) (my-test-project (sbt-invoke-project))))
      (define-key sbt-repl-minor-mode-map (kbd "q") (lambda () 
        (interactive)
        (if (get-buffer-process (current-buffer))
          (insert "q")
          (bury-buffer))))
      (define-key sbt-repl-minor-mode-map (kbd "g") (lambda () 
        (interactive)
        (if (get-buffer-process (current-buffer))
          (insert "g")
          (sbt-invoke (buffer-name) (sbt-invoke-project) (sbt-invoke-commands) (sbt-invoke-cont)))))
      (define-minor-mode sbt-repl-minor-mode "Hosts keybindings for sbt-repl interactions" nil " sbt-repl" 'sbt-repl-minor-mode-map :global nil)
      (sbt-minor-mode 0)
      (sbt-repl-minor-mode 1)
      (defun my-minibuffer-setup-hook () (sbt-repl-minor-mode 0))
      (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)

      (cd (sbt-project-root (sbt-invoke-project)))
      ;; todo. infer the correct scala and classpath
      (comint-exec (current-buffer) "scala" "scala" nil '("-classpath" "./target/scala-2.9.1/classes;c:/PROGRA~1/Java/JDK16~1.0_2/lib/tools.jar")))))))
                                                                                        
(defun my-compile-project (name-or-path)
  (let ((project-name "scratchpad"))
  (when project-name
    (if (buffer-file-name) (save-buffer))
    ;;(sbt-invoke "*compile*" project-name "compile" (lambda () (run-at-time 0 nil (lambda () (bury-buffer))))))))
    (sbt-invoke "*compile*" project-name "compile"))))
                                                                                        
(defun my-rebuild-project (name-or-path)
  (let ((project-name "scratchpad"))
  (when project-name
    (if (buffer-file-name) (save-buffer))
    ;;(sbt-invoke "*compile*" project-name '("clean" "compile") (lambda () (run-at-time 0 nil (lambda () (bury-buffer))))))))
    (sbt-invoke "*compile*" project-name '("clean" "compile")))))
                                                                                        
(defun my-run-project (name-or-path)
  (let ((main-class (read-from-minibuffer
    (concat "Main class"
      (if (and (boundp 'my-sbt-run-prev-main-class) 
               (stringp my-sbt-run-prev-main-class)
               (not (string= my-sbt-run-prev-main-class "")))
        (concat " (default " my-sbt-run-prev-main-class ")")
        "")
      ": "))))
    (if (and (string= main-class "")
             (boundp 'my-sbt-run-prev-main-class) 
             (stringp my-sbt-run-prev-main-class))
      (setq main-class my-sbt-run-prev-main-class))
    (setq my-sbt-run-prev-main-class main-class))

  (if (and (boundp 'my-sbt-run-prev-main-class) 
           (stringp my-sbt-run-prev-main-class)
           (not (string= my-sbt-run-prev-main-class "")))
    (let ((project-name "scratchpad"))
    (when project-name
      (if (buffer-file-name) (save-buffer))
      (sbt-invoke "*run*" project-name "compile" (lambda ()
        (insert "\n")
        (compilation-shell-minor-mode -1)

        (defvar sbt-run-minor-mode-map (make-keymap) "sbt-run-minor-mode keymap.")
        (define-key sbt-run-minor-mode-map (kbd "<return>") (lambda ()
          (interactive)
          (if (and (get-buffer-process (current-buffer)) (eq (point) (point-max)))
            (comint-send-input)
            (newline))))
        (define-key sbt-run-minor-mode-map (kbd "C-S-r") (lambda () (interactive) (my-repl-project (sbt-invoke-project))))
        (define-key sbt-run-minor-mode-map (kbd "C-S-b") (lambda () (interactive) (my-compile-project (sbt-invoke-project))))
        (define-prefix-command 'sbt-run-minor-mode-compile-map)
        (define-key sbt-run-minor-mode-map (kbd "M-b") 'sbt-run-minor-mode-compile-map)
        (define-key sbt-run-minor-mode-compile-map (kbd "r") (lambda () (interactive) (my-rebuild-project (sbt-invoke-project))))
        (define-key sbt-run-minor-mode-compile-map (kbd "M-r") (lambda () (interactive) (my-rebuild-project (sbt-invoke-project))))
        (define-key sbt-run-minor-mode-map (kbd "<C-S-return>") (lambda () (interactive) (my-run-project (sbt-invoke-project))))
        (define-key sbt-run-minor-mode-map (kbd "<s-S-return>") (lambda () (interactive) (my-test-project (sbt-invoke-project))))
        (define-key sbt-run-minor-mode-map (kbd "q") (lambda () 
          (interactive)
          (if (get-buffer-process (current-buffer))
            (insert "q")
            (bury-buffer))))
        (define-key sbt-run-minor-mode-map (kbd "g") (lambda () 
          (interactive)
          (if (get-buffer-process (current-buffer))
            (insert "g")
            (sbt-invoke (buffer-name) (sbt-invoke-project) (sbt-invoke-commands) (sbt-invoke-cont)))))
        (define-minor-mode sbt-run-minor-mode "Hosts keybindings for sbt-run interactions" nil " sbt-run" 'sbt-run-minor-mode-map :global nil)
        (sbt-minor-mode 0)
        (sbt-run-minor-mode 1)
        (defun my-minibuffer-setup-hook () (sbt-run-minor-mode 0))
        (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)

        (cd (sbt-project-root (sbt-invoke-project)))
        ;; todo. infer the correct scala and classpath
        (insert (concat "Running " my-sbt-run-prev-main-class "...\n"))
        (comint-exec (current-buffer) "scala" "scala" nil (list "-classpath" "./target/scala-2.9.1/classes;c:/PROGRA~1/Java/JDK16~1.0_2/lib/tools.jar" my-sbt-run-prev-main-class))))))))
                                                                                        
(defun my-test-project (name-or-path)
  (let ((project-name "scratchpad"))
  (when project-name
    (if (buffer-file-name) (save-buffer))
    ;;(sbt-invoke "*test*" project-name "test" (lambda () (run-at-time 0 nil (lambda () (bury-buffer))))))))
    (sbt-invoke "*test*" project-name "test"))))

